package com.filipmacek.movement.blockchain;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.6.1.
 */
@SuppressWarnings("rawtypes")
public class Movement extends Contract {
    public static final String BINARY = "608060405260016004553480156200001657600080fd5b506040516200420a3803806200420a833981810160405260208110156200003c57600080fd5b5051600680546001600160a01b0319163317908190556040516001600160a01b0391909116906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3600780546001600160a01b0319166001600160a01b038316179055620000c473a36085f69e2889c224210f603d836748e7dc008862000217565b6200010f6040518060400160405280600581526020016426b0b234b760d91b815250604051806040016040528060048152602001637061737360e01b8152506200023960201b60201c565b6200018b6040518060400160405280601481526020017f34352e3831323830362c2031352e3939373835310000000000000000000000008152506040518060400160405280601481526020017f34352e3831323237392c2031352e393936353533000000000000000000000000815250620004bd60201b60201c565b62000210604051806040016040528060058152602001644b6f616c6160d81b8152506040518060400160405280600d81526020016c35342e3134372e3235302e353560981b8152506040518060400160405280600381526020016261706960e81b81525073a5cb721fc436796b22d322cc2ec2dbc562c3c67e6200075060201b60201c565b50620009c5565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6040805161010081018252600a8054600180820180855260208086018981529686018890523360608701526080860192909252600060a0860181905260c0860181905260e0860181905290845592909252825160079091027fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a881019182559351805193949193620002f4937fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a990930192919091019062000920565b50604082015180516200031291600284019160209091019062000920565b50606082015160038201805460808501511515600160a01b0260ff60a01b196001600160a01b039094166001600160a01b0319909216919091179290921691909117905560a0820151600482015560c0820151600582015560e0909101516006909101556040518251600191600891859190819060208401908083835b60208310620003b05780518252601f1990920191602091820191016200038f565b51815160001960209485036101000a01908116901991909116179052920194855250604080519485900382018520805496151560ff19978816179055336000818152600984528281208054909816600117909755600a5480875291860181905260608684018181528a519188019190915289517f8985a38dd39c6c9ec6e37c1d9ab7f03244a99e621a517fe1ac4afc72ed32d3f59893978b975092955091939092608085019291870191908190849084905b838110156200047c57818101518382015260200162000462565b50505050905090810190601f168015620004aa5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a15050565b60408051602080820183526000808352835160e081018552600b80546001810180845233848701908152978401878152606085018b9052608085018a905260a0850186905260c085018690529083559190935281517f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db9600690940293840190815595517f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01dba840180546001600160a01b0319166001600160a01b03909216919091179055518051949591949193620005ba937f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01dbb019291019062000920565b5060608201518051620005d891600384019160209091019062000920565b5060808201518051620005f691600484019160209091019062000920565b5060a0828101516005909201805460c09094015115156101000261ff001993151560ff199095169490941792909216929092179055600b5460408051828152336020808301829052608093830184815289519484019490945288517fd5db811c631de0dfee240f41c5684d445a68a578e4618d2a76b402f65f5cce5e9692948a948a949093919260608501929185019187019080838360005b83811015620006a95781810151838201526020016200068f565b50505050905090810190601f168015620006d75780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156200070c578181015183820152602001620006f2565b50505050905090810190601f1680156200073a5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a1505050565b6040805160c081018252600c80546001810180845260208085018a8152958501899052606085018890526001600160a01b0387166080860152600060a08601819052918455929052825160069091027fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c78101918255935180519394919362000802937fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c890930192919091019062000920565b50604082015180516200082091600284019160209091019062000920565b50606082015180516200083e91600384019160209091019062000920565b5060808201516004820180546001600160a01b0319166001600160a01b0390921691909117905560a090910151600590910155600c5460408051828152602080820183815288519383019390935287517f7b51861cf09f2cf4e6443bb731e032d560a5056e959be700599a1a7382b9bc0994938993929091606084019185019080838360005b83811015620008de578181015183820152602001620008c4565b50505050905090810190601f1680156200090c5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a150505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200096357805160ff191683800117855562000993565b8280016001018555821562000993579182015b828111156200099357825182559160200191906001019062000976565b50620009a1929150620009a5565b5090565b620009c291905b80821115620009a15760008155600101620009ac565b90565b61383580620009d56000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c80638f32d59b116100de578063b93f9b0a11610097578063d671fc8f11610071578063d671fc8f14610f2d578063f18d18cc14610fe3578063f2fde38b14611075578063f38c6bb61461109b5761018e565b8063b93f9b0a14610d43578063bed34bba14610d60578063d369516114610e895761018e565b80638f32d59b14610abd5780639cc72f7f14610ac5578063a4a1e26314610acd578063a4ef386514610ad5578063ad9fefc014610add578063b8a89b3514610b8a5761018e565b806341d2a2561161014b578063679fc18711610125578063679fc18714610872578063726f16d81461092357806374215a6a14610a745780638da5cb5b14610a995761018e565b806341d2a2561461081f578063616c0ebe1461085057806361ea72081461086a5761018e565b8063065a9e9b14610193578063079eaf34146102be578063122fd7c5146103e757806313a30e731461049d5780631c53c2801461055c578063365b98b2146106e4575b600080fd5b6102bc600480360360408110156101a957600080fd5b810190602081018135600160201b8111156101c357600080fd5b8201836020820111156101d557600080fd5b803590602001918460018302840111600160201b831117156101f657600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561024857600080fd5b82018360208201111561025a57600080fd5b803590602001918460018302840111600160201b8311171561027b57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506110b8945050505050565b005b6102bc600480360360408110156102d457600080fd5b810190602081018135600160201b8111156102ee57600080fd5b82018360208201111561030057600080fd5b803590602001918460018302840111600160201b8311171561032157600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561037357600080fd5b82018360208201111561038557600080fd5b803590602001918460018302840111600160201b831117156103a657600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061133f945050505050565b6102bc600480360360608110156103fd57600080fd5b81359190810190604081016020820135600160201b81111561041e57600080fd5b82018360208201111561043057600080fd5b803590602001918460018302840111600160201b8311171561045157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550505090356001600160a01b031691506115ba9050565b6104ba600480360360208110156104b357600080fd5b503561169e565b6040518088815260200187815260200180602001868152602001858152602001848152602001838152602001828103825287818151815260200191508051906020019080838360005b8381101561051b578181015183820152602001610503565b50505050905090810190601f1680156105485780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b6105796004803603602081101561057257600080fd5b5035611785565b60405180878152602001806020018060200180602001866001600160a01b03166001600160a01b03168152602001858152602001848103845289818151815260200191508051906020019080838360005b838110156105e25781810151838201526020016105ca565b50505050905090810190601f16801561060f5780820380516001836020036101000a031916815260200191505b5084810383528851815288516020918201918a019080838360005b8381101561064257818101518382015260200161062a565b50505050905090810190601f16801561066f5780820380516001836020036101000a031916815260200191505b50848103825287518152875160209182019189019080838360005b838110156106a257818101518382015260200161068a565b50505050905090810190601f1680156106cf5780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390f35b610701600480360360208110156106fa57600080fd5b5035611986565b604051808981526020018060200180602001886001600160a01b03166001600160a01b031681526020018715151515815260200186815260200185815260200184815260200183810383528a818151815260200191508051906020019080838360005b8381101561077c578181015183820152602001610764565b50505050905090810190601f1680156107a95780820380516001836020036101000a031916815260200191505b5083810382528951815289516020918201918b019080838360005b838110156107dc5781810151838201526020016107c4565b50505050905090810190601f1680156108095780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390f35b61083c6004803603602081101561083557600080fd5b5035611b0f565b604080519115158252519081900360200190f35b610858611de4565b60408051918252519081900360200190f35b610858611deb565b61088f6004803603602081101561088857600080fd5b5035611df1565b6040518086815260200185815260200180602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b838110156108e45781810151838201526020016108cc565b50505050905090810190601f1680156109115780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b6109406004803603602081101561093957600080fd5b5035611ecc565b60405180888152602001876001600160a01b03166001600160a01b031681526020018060200180602001806020018615151515815260200185151515158152602001848103845289818151815260200191508051906020019080838360005b838110156109b757818101518382015260200161099f565b50505050905090810190601f1680156109e45780820380516001836020036101000a031916815260200191505b5084810383528851815288516020918201918a019080838360005b83811015610a175781810151838201526020016109ff565b50505050905090810190601f168015610a445780820380516001836020036101000a031916815260200191505b508481038252875181528751602091820191890190808383600083156107dc5781810151838201526020016107c4565b6102bc60048036036040811015610a8a57600080fd5b508035906020013515156120c6565b610aa16121d4565b604080516001600160a01b039092168252519081900360200190f35b61083c6121e3565b6108586121f4565b6108586121fa565b610858612200565b6102bc60048036036060811015610af357600080fd5b81359190810190604081016020820135600160201b811115610b1457600080fd5b820183602082011115610b2657600080fd5b803590602001918460018302840111600160201b83111715610b4757600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505091359250612206915050565b6102bc60048036036080811015610ba057600080fd5b810190602081018135600160201b811115610bba57600080fd5b820183602082011115610bcc57600080fd5b803590602001918460018302840111600160201b83111715610bed57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b811115610c3f57600080fd5b820183602082011115610c5157600080fd5b803590602001918460018302840111600160201b83111715610c7257600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b811115610cc457600080fd5b820183602082011115610cd657600080fd5b803590602001918460018302840111600160201b83111715610cf757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550505090356001600160a01b0316915061244d9050565b610aa160048036036020811015610d5957600080fd5b5035612614565b61083c60048036036040811015610d7657600080fd5b810190602081018135600160201b811115610d9057600080fd5b820183602082011115610da257600080fd5b803590602001918460018302840111600160201b83111715610dc357600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b811115610e1557600080fd5b820183602082011115610e2757600080fd5b803590602001918460018302840111600160201b83111715610e4857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550612646945050505050565b61083c60048036036020811015610e9f57600080fd5b810190602081018135600160201b811115610eb957600080fd5b820183602082011115610ecb57600080fd5b803590602001918460018302840111600160201b83111715610eec57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061272e945050505050565b6102bc600480360360a0811015610f4357600080fd5b81359190810190604081016020820135600160201b811115610f6457600080fd5b820183602082011115610f7657600080fd5b803590602001918460018302840111600160201b83111715610f9757600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505082359350505060208101359060400135612a69565b61100060048036036020811015610ff957600080fd5b5035612c9c565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561103a578181015183820152602001611022565b50505050905090810190601f1680156110675780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102bc6004803603602081101561108b57600080fd5b50356001600160a01b0316612d5c565b611000600480360360208110156110b157600080fd5b5035612dc1565b60408051602080820183526000808352835160e081018552600b80546001810180845233848701908152978401878152606085018b9052608085018a905260a0850186905260c085018690529083559190935281517f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db9600690940293840190815595517f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01dba840180546001600160a01b0319166001600160a01b039092169190911790555180519495919491936111b3937f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01dbb01929101906135ee565b50606082015180516111cf9160038401916020909101906135ee565b50608082015180516111eb9160048401916020909101906135ee565b5060a0828101516005909201805460c09094015115156101000261ff001993151560ff199095169490941792909216929092179055600b5460408051828152336020808301829052608093830184815289519484019490945288517fd5db811c631de0dfee240f41c5684d445a68a578e4618d2a76b402f65f5cce5e9692948a948a949093919260608501929185019187019080838360005b8381101561129c578181015183820152602001611284565b50505050905090810190601f1680156112c95780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156112fc5781810151838201526020016112e4565b50505050905090810190601f1680156113295780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a1505050565b6040805161010081018252600a8054600180820180855260208086018981529686018890523360608701526080860192909252600060a0860181905260c0860181905260e0860181905290845592909252825160079091027fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8810191825593518051939491936113f8937fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a99093019291909101906135ee565b50604082015180516114149160028401916020909101906135ee565b50606082015160038201805460808501511515600160a01b0260ff60a01b196001600160a01b039094166001600160a01b0319909216919091179290921691909117905560a0820151600482015560c0820151600582015560e0909101516006909101556040518251600191600891859190819060208401908083835b602083106114b05780518252601f199092019160209182019101611491565b51815160001960209485036101000a01908116901991909116179052920194855250604080519485900382018520805496151560ff19978816179055336000818152600984528281208054909816600117909755600a5480875291860181905260608684018181528a519188019190915289517f8985a38dd39c6c9ec6e37c1d9ab7f03244a99e621a517fe1ac4afc72ed32d3f59893978b975092955091939092608085019291870191908190849084905b8381101561157a578181015183820152602001611562565b50505050905090810190601f1680156115a75780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a15050565b6115c26121e3565b611613576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61161b61366c565b61163561162784612e3d565b30633a10ad3560e11b612e5b565b9050611684604051806040016040528060078152602001660caf0e8a0c2e8d60cb1b815250604051806040016040528060018152602001603160f81b81525083612e869092919063ffffffff16565b6116978282670de0b6b3a7640000612eb5565b5050505050565b600e81815481106116ab57fe5b9060005260206000209060070201600091509050806000015490806001015490806002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156117635780601f1061173857610100808354040283529160200191611763565b820191906000526020600020905b81548152906001019060200180831161174657829003601f168201915b5050505050908060030154908060040154908060050154908060060154905087565b600c818154811061179257fe5b9060005260206000209060060201600091509050806000015490806001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156118445780601f1061181957610100808354040283529160200191611844565b820191906000526020600020905b81548152906001019060200180831161182757829003601f168201915b50505060028085018054604080516020601f60001961010060018716150201909416959095049283018590048502810185019091528181529596959450909250908301828280156118d65780601f106118ab576101008083540402835291602001916118d6565b820191906000526020600020905b8154815290600101906020018083116118b957829003601f168201915b5050505060038301805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529495949350908301828280156119665780601f1061193b57610100808354040283529160200191611966565b820191906000526020600020905b81548152906001019060200180831161194957829003601f168201915b50505050600483015460059093015491926001600160a01b031691905086565b600a818154811061199357fe5b9060005260206000209060070201600091509050806000015490806001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611a455780601f10611a1a57610100808354040283529160200191611a45565b820191906000526020600020905b815481529060010190602001808311611a2857829003601f168201915b50505060028085018054604080516020601f6000196101006001871615020190941695909504928301859004850281018501909152818152959695945090925090830182828015611ad75780601f10611aac57610100808354040283529160200191611ad7565b820191906000526020600020905b815481529060010190602001808311611aba57829003601f168201915b5050505060038301546004840154600585015460069095015493946001600160a01b03831694600160a01b90930460ff169350909188565b600c54600090611b1e57600080fd5b600c5460005b81811015611dd85783600c8281548110611b3a57fe5b9060005260206000209060060201600001541415611dd057600c6001830381548110611b6257fe5b906000526020600020906006020160000154600c8281548110611b8157fe5b6000918252602090912060069091020155600c80546000198401908110611ba457fe5b9060005260206000209060060201600101600c8281548110611bc257fe5b90600052602060002090600602016001019080546001816001161561010002031660029004611bf29291906136a1565b50600c6001830381548110611c0357fe5b9060005260206000209060060201600201600c8281548110611c2157fe5b90600052602060002090600602016002019080546001816001161561010002031660029004611c519291906136a1565b50600c6001830381548110611c6257fe5b9060005260206000209060060201600301600c8281548110611c8057fe5b90600052602060002090600602016003019080546001816001161561010002031660029004611cb09291906136a1565b50600c6001830381548110611cc157fe5b906000526020600020906006020160040160009054906101000a90046001600160a01b0316600c8281548110611cf357fe5b906000526020600020906006020160040160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600c805480611d3357fe5b60008281526020812060066000199093019283020181815590611d596001830182613716565b611d67600283016000613716565b611d75600383016000613716565b506004810180546001600160a01b0319169055600060059091015590556040805185815290517f12d39b3dde0d2e21bf8fdb48079d460950637e23cde54d4b67f9ea75633dbf809181900360200190a1600192505050611ddf565b600101611b24565b5060009150505b919050565b600d545b90565b600c5490565b600d8181548110611dfe57fe5b9060005260206000209060050201600091509050806000015490806001015490806002018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611eb65780601f10611e8b57610100808354040283529160200191611eb6565b820191906000526020600020905b815481529060010190602001808311611e9957829003601f168201915b5050505050908060030154908060040154905085565b600b8181548110611ed957fe5b6000918252602091829020600691909102018054600180830154600280850180546040805161010096831615969096026000190190911692909204601f81018890048802850188019092528184529396506001600160a01b0390911694919291830182828015611f8a5780601f10611f5f57610100808354040283529160200191611f8a565b820191906000526020600020905b815481529060010190602001808311611f6d57829003601f168201915b5050505060038301805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815294959493509083018282801561201a5780601f10611fef5761010080835404028352916020019161201a565b820191906000526020600020905b815481529060010190602001808311611ffd57829003601f168201915b5050505060048301805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529495949350908301828280156120aa5780601f1061207f576101008083540402835291602001916120aa565b820191906000526020600020905b81548152906001019060200180831161208d57829003601f168201915b5050506005909301549192505060ff8082169161010090041687565b60008281526005602052604090205482906001600160a01b0316331461211d5760405162461bcd60e51b81526004018080602001828103825260288152602001806137d86028913960400191505060405180910390fd5b60008181526005602052604080822080546001600160a01b03191690555182917f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a91a2604080518315158152905184917f0843f8b8364bf6baae89374c4be9b3e78c0f902d5f67ea8ec9b9d0ea447f308e919081900360200190a281600b6000815481106121a757fe5b906000526020600020906006020160050160016101000a81548160ff021916908315150217905550505050565b6006546001600160a01b031690565b6006546001600160a01b0316331490565b600b5490565b600a5490565b600e5490565b6007546001600160a01b0316331461221d57600080fd5b6008826040518082805190602001908083835b6020831061224f5780518252601f199092019160209182019101612230565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205460ff1691506122c89050576040805162461bcd60e51b81526020600482015260126024820152715573657220646f65736e742065786973747360701b604482015290519081900360640190fd5b6001600b60018503815481106122da57fe5b906000526020600020906006020160050160006101000a81548160ff02191690831515021790555081600b600185038154811061231357fe5b906000526020600020906006020160020190805190602001906123379291906135ee565b506040805160a081018252600d805460018101808452602080850189815295850188815242606087015260808601889052918455600093909352835160059092027fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5810192835594517fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb6860155518051939491936123fe937fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb79093019291909101906135ee565b50606082015160038201556080909101516004909101556040805184815290517fa94e75102bdc083e8107dad2404f5b838e15d8da51b8a31254b01bb79375b4a09181900360200190a1505050565b6040805160c081018252600c80546001810180845260208085018a8152958501899052606085018890526001600160a01b0387166080860152600060a08601819052918455929052825160069091027fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c7810191825593518051939491936124fd937fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c89093019291909101906135ee565b50604082015180516125199160028401916020909101906135ee565b50606082015180516125359160038401916020909101906135ee565b5060808201516004820180546001600160a01b0319166001600160a01b0390921691909117905560a090910151600590910155600c5460408051828152602080820183815288519383019390935287517f7b51861cf09f2cf4e6443bb731e032d560a5056e959be700599a1a7382b9bc0994938993929091606084019185019080838360005b838110156125d35781810151838201526020016125bb565b50505050905090810190601f1680156126005780820380516001836020036101000a031916815260200191505b50935050505060405180910390a150505050565b6000600a828154811061262357fe5b60009182526020909120600790910201600301546001600160a01b031692915050565b6000816040516020018082805190602001908083835b6020831061267b5780518252601f19909201916020918201910161265c565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405280519060200120836040516020018082805190602001908083835b602083106126e95780518252601f1990920191602091820191016126ca565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051602081830303815290604052805190602001201490505b92915050565b600a5460009061273d57600080fd5b60005b600a54811015612a605761280a600a828154811061275a57fe5b90600052602060002090600702016001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156127ff5780601f106127d4576101008083540402835291602001916127ff565b820191906000526020600020905b8154815290600101906020018083116127e257829003601f168201915b505050505084612646565b15612a5857600a8054600019810190811061282157fe5b9060005260206000209060070201600101600a828154811061283f57fe5b9060005260206000209060070201600101908054600181600116156101000203166002900461286f9291906136a1565b50600a8054600019810190811061288257fe5b9060005260206000209060070201600201600a82815481106128a057fe5b906000526020600020906007020160020190805460018160011615610100020316600290046128d09291906136a1565b50600a805460001981019081106128e357fe5b906000526020600020906007020160030160009054906101000a90046001600160a01b0316600a828154811061291557fe5b906000526020600020906007020160030160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600a80548061295557fe5b6000828152602081206007600019909301928302018181559061297b6001830182613716565b612989600283016000613716565b506003810180546001600160a81b0319169055600060048201819055600582018190556006909101819055915560408051602080825286518183015286517f28f7ad4961343bc792aec8e7886fc38c6847f9cd253ec14a633ff3bed8370883948894849390840192908601918190849084905b83811015612a145781810151838201526020016129fc565b50505050905090810190601f168015612a415780820380516001836020036101000a031916815260200191505b509250505060405180910390a16001915050611ddf565b600101612740565b50600092915050565b6007546001600160a01b03163314612a8057600080fd5b600e546001841415612b8e576040805160e0810182526001808401825260208083018a815293830189815242606085015260006080850181905260a0850188905260c08501849052600e805494850181559052835160079093027fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd810193845594517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fe86015551805193949293612b5e937fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3ff019291909101906135ee565b50606082015181600301556080820151816004015560a0820151816005015560c082015181600601555050612c94565b6002841415612c94576040805160e0810182526001808401825260208083018a81529383018981524260608501526080840188905260a08401879052600260c0850152600e80549384018155600052835160079093027fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd810193845594517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fe86015551805193949293612c68937fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3ff019291909101906135ee565b50606082015181600301556080820151816004015560a0820151816005015560c0820151816006015550505b505050505050565b6060600a8281548110612cab57fe5b90600052602060002090600702016001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612d505780601f10612d2557610100808354040283529160200191612d50565b820191906000526020600020905b815481529060010190602001808311612d3357829003601f168201915b50505050509050919050565b612d646121e3565b612db5576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b612dbe8161308c565b50565b6060600a8281548110612dd057fe5b600091825260209182902060026007909202018101805460408051601f600019610100600186161502019093169490940491820185900485028401850190528083529192909190830182828015612d505780601f10612d2557610100808354040283529160200191612d50565b80516000908290612e52575060009050611ddf565b50506020015190565b612e6361366c565b612e6b61366c565b612e7d8186868663ffffffff61312d16565b95945050505050565b6080830151612e9b908363ffffffff61316a16565b6080830151612eb0908263ffffffff61316a16565b505050565b6004546040805130606090811b60208084019190915260348084018690528451808503909101815260549093018452825192810192909220908601939093526000838152600590915281812080546001600160a01b0319166001600160a01b038816179055905182917fb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af991a26002546001600160a01b0316634000aea08584612f5d87613187565b6040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015612fc7578181015183820152602001612faf565b50505050905090810190601f168015612ff45780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b15801561301557600080fd5b505af1158015613029573d6000803e3d6000fd5b505050506040513d602081101561303f57600080fd5b505161307c5760405162461bcd60e51b81526004018080602001828103825260238152602001806137b56023913960400191505060405180910390fd5b6004805460010190559392505050565b6001600160a01b0381166130d15760405162461bcd60e51b815260040180806020018281038252602681526020018061378f6026913960400191505060405180910390fd5b6006546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b61313561366c565b61314585608001516101006132c7565b50509183526001600160a01b031660208301526001600160e01b031916604082015290565b6131778260038351613301565b612eb0828263ffffffff61341116565b6060634042994660e01b6000808460000151856020015186604001518760600151600189608001516000015160405160240180896001600160a01b03166001600160a01b03168152602001888152602001878152602001866001600160a01b03166001600160a01b03168152602001856001600160e01b0319166001600160e01b031916815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561325557818101518382015260200161323d565b50505050905090810190601f1680156132825780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909d169c909c17909b5250989950505050505050505050919050565b6132cf61375a565b60208206156132e45760208206602003820191505b506020828101829052604080518085526000815290920101905290565b60178111613328576133228360e0600585901b16831763ffffffff61343216565b50612eb0565b60ff811161335e5761334b836018611fe0600586901b161763ffffffff61343216565b506133228382600163ffffffff61344a16565b61ffff811161339557613382836019611fe0600586901b161763ffffffff61343216565b506133228382600263ffffffff61344a16565b63ffffffff81116133ce576133bb83601a611fe0600586901b161763ffffffff61343216565b506133228382600463ffffffff61344a16565b67ffffffffffffffff8111612eb0576133f883601b611fe0600586901b161763ffffffff61343216565b5061340b8382600863ffffffff61344a16565b50505050565b61341961375a565b61342b8384600001515184855161346b565b9392505050565b61343a61375a565b61342b8384600001515184613517565b61345261375a565b613463848560000151518585613562565b949350505050565b61347361375a565b825182111561348157600080fd5b846020015182850111156134ab576134ab856134a387602001518786016135c0565b6002026135d7565b6000808651805187602083010193508088870111156134ca5787860182525b505050602084015b602084106134f15780518252601f1990930192602091820191016134d2565b51815160001960208690036101000a019081169019919091161790525083949350505050565b61351f61375a565b8360200151831061353b5761353b8485602001516002026135d7565b835180516020858301018481535080851415613558576001810182525b5093949350505050565b61356a61375a565b8460200151848301111561358757613587858584016002026135d7565b60006001836101000a0390508551838682010185831982511617815250805184870111156135b55783860181525b509495945050505050565b6000818311156135d1575081612728565b50919050565b81516135e383836132c7565b5061340b8382613411565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061362f57805160ff191683800117855561365c565b8280016001018555821561365c579182015b8281111561365c578251825591602001919060010190613641565b50613668929150613774565b5090565b6040805160a08101825260008082526020820181905291810182905260608101919091526080810161369c61375a565b905290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106136da578054855561365c565b8280016001018555821561365c57600052602060002091601f016020900482015b8281111561365c5782548255916001019190600101906136fb565b50805460018160011615610100020316600290046000825580601f1061373c5750612dbe565b601f016020900490600052602060002090810190612dbe9190613774565b604051806040016040528060608152602001600081525090565b611de891905b80821115613668576000815560010161377a56fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373756e61626c6520746f207472616e73666572416e6443616c6c20746f206f7261636c65536f75726365206d75737420626520746865206f7261636c65206f66207468652072657175657374a2646970667358221220a1a20eddba61e1a79818fc862177316541f80772b942c4c95992b397ed51003964736f6c634300060b0033";

    public static final String FUNC_ADDNODE = "addNode";

    public static final String FUNC_ADDROUTE = "addRoute";

    public static final String FUNC_ADDUSER = "addUser";

    public static final String FUNC_COMPARESTRINGS = "compareStrings";

    public static final String FUNC_DELETENODE = "deleteNode";

    public static final String FUNC_DELETEUSER = "deleteUser";

    public static final String FUNC_ENDROUTEEVENT = "endRouteEvent";

    public static final String FUNC_FULFILLROUTESTATUS = "fulfillRouteStatus";

    public static final String FUNC_GETADDRESS = "getAddress";

    public static final String FUNC_GETNODESCOUNT = "getNodesCount";

    public static final String FUNC_GETPASSWORD = "getPassword";

    public static final String FUNC_GETROUTEENDEVENTCOUNT = "getRouteEndEventCount";

    public static final String FUNC_GETROUTESTARTEVENTCOUNT = "getRouteStartEventCount";

    public static final String FUNC_GETROUTESCOUNT = "getRoutesCount";

    public static final String FUNC_GETUSERNAME = "getUsername";

    public static final String FUNC_GETUSERSCOUNT = "getUsersCount";

    public static final String FUNC_ISOWNER = "isOwner";

    public static final String FUNC_NODES = "nodes";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_REQUESTROUTESTATUS = "requestRouteStatus";

    public static final String FUNC_ROUTEENDEVENTS = "routeEndEvents";

    public static final String FUNC_ROUTESTARTEVENTS = "routeStartEvents";

    public static final String FUNC_ROUTES = "routes";

    public static final String FUNC_STARTROUTEEVENT = "startRouteEvent";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_USERS = "users";

    public static final Event CHAINLINKCANCELLED_EVENT = new Event("ChainlinkCancelled", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}));
    ;

    public static final Event CHAINLINKFULFILLED_EVENT = new Event("ChainlinkFulfilled", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}));
    ;

    public static final Event CHAINLINKREQUESTED_EVENT = new Event("ChainlinkRequested", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}));
    ;

    public static final Event NEWNODEADDED_EVENT = new Event("NewNodeAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event NEWROUTECREATED_EVENT = new Event("NewRouteCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event NEWUSERCREATED_EVENT = new Event("NewUserCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event NODEDELETED_EVENT = new Event("NodeDeleted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event ROUTEFINISHED_EVENT = new Event("RouteFinished", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event ROUTESTARTED_EVENT = new Event("RouteStarted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event ROUTESTATUSFULFILLED_EVENT = new Event("RouteStatusFulfilled", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event USERDELETED_EVENT = new Event("UserDeleted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    @Deprecated
    protected Movement(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Movement(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Movement(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Movement(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ChainlinkCancelledEventResponse> getChainlinkCancelledEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CHAINLINKCANCELLED_EVENT, transactionReceipt);
        ArrayList<ChainlinkCancelledEventResponse> responses = new ArrayList<ChainlinkCancelledEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ChainlinkCancelledEventResponse typedResponse = new ChainlinkCancelledEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ChainlinkCancelledEventResponse> chainlinkCancelledEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ChainlinkCancelledEventResponse>() {
            @Override
            public ChainlinkCancelledEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CHAINLINKCANCELLED_EVENT, log);
                ChainlinkCancelledEventResponse typedResponse = new ChainlinkCancelledEventResponse();
                typedResponse.log = log;
                typedResponse.id = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ChainlinkCancelledEventResponse> chainlinkCancelledEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHAINLINKCANCELLED_EVENT));
        return chainlinkCancelledEventFlowable(filter);
    }

    public List<ChainlinkFulfilledEventResponse> getChainlinkFulfilledEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CHAINLINKFULFILLED_EVENT, transactionReceipt);
        ArrayList<ChainlinkFulfilledEventResponse> responses = new ArrayList<ChainlinkFulfilledEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ChainlinkFulfilledEventResponse typedResponse = new ChainlinkFulfilledEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ChainlinkFulfilledEventResponse> chainlinkFulfilledEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ChainlinkFulfilledEventResponse>() {
            @Override
            public ChainlinkFulfilledEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CHAINLINKFULFILLED_EVENT, log);
                ChainlinkFulfilledEventResponse typedResponse = new ChainlinkFulfilledEventResponse();
                typedResponse.log = log;
                typedResponse.id = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ChainlinkFulfilledEventResponse> chainlinkFulfilledEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHAINLINKFULFILLED_EVENT));
        return chainlinkFulfilledEventFlowable(filter);
    }

    public List<ChainlinkRequestedEventResponse> getChainlinkRequestedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CHAINLINKREQUESTED_EVENT, transactionReceipt);
        ArrayList<ChainlinkRequestedEventResponse> responses = new ArrayList<ChainlinkRequestedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ChainlinkRequestedEventResponse typedResponse = new ChainlinkRequestedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ChainlinkRequestedEventResponse> chainlinkRequestedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ChainlinkRequestedEventResponse>() {
            @Override
            public ChainlinkRequestedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CHAINLINKREQUESTED_EVENT, log);
                ChainlinkRequestedEventResponse typedResponse = new ChainlinkRequestedEventResponse();
                typedResponse.log = log;
                typedResponse.id = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ChainlinkRequestedEventResponse> chainlinkRequestedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHAINLINKREQUESTED_EVENT));
        return chainlinkRequestedEventFlowable(filter);
    }

    public List<NewNodeAddedEventResponse> getNewNodeAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWNODEADDED_EVENT, transactionReceipt);
        ArrayList<NewNodeAddedEventResponse> responses = new ArrayList<NewNodeAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewNodeAddedEventResponse typedResponse = new NewNodeAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.nodeId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.name = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewNodeAddedEventResponse> newNodeAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NewNodeAddedEventResponse>() {
            @Override
            public NewNodeAddedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWNODEADDED_EVENT, log);
                NewNodeAddedEventResponse typedResponse = new NewNodeAddedEventResponse();
                typedResponse.log = log;
                typedResponse.nodeId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.name = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NewNodeAddedEventResponse> newNodeAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWNODEADDED_EVENT));
        return newNodeAddedEventFlowable(filter);
    }

    public List<NewRouteCreatedEventResponse> getNewRouteCreatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWROUTECREATED_EVENT, transactionReceipt);
        ArrayList<NewRouteCreatedEventResponse> responses = new ArrayList<NewRouteCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewRouteCreatedEventResponse typedResponse = new NewRouteCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.routeId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.maker = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.startLocation = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.endLocation = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewRouteCreatedEventResponse> newRouteCreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NewRouteCreatedEventResponse>() {
            @Override
            public NewRouteCreatedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWROUTECREATED_EVENT, log);
                NewRouteCreatedEventResponse typedResponse = new NewRouteCreatedEventResponse();
                typedResponse.log = log;
                typedResponse.routeId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.maker = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.startLocation = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.endLocation = (String) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NewRouteCreatedEventResponse> newRouteCreatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWROUTECREATED_EVENT));
        return newRouteCreatedEventFlowable(filter);
    }

    public List<NewUserCreatedEventResponse> getNewUserCreatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWUSERCREATED_EVENT, transactionReceipt);
        ArrayList<NewUserCreatedEventResponse> responses = new ArrayList<NewUserCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewUserCreatedEventResponse typedResponse = new NewUserCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.index = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.username = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.addr = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewUserCreatedEventResponse> newUserCreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NewUserCreatedEventResponse>() {
            @Override
            public NewUserCreatedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWUSERCREATED_EVENT, log);
                NewUserCreatedEventResponse typedResponse = new NewUserCreatedEventResponse();
                typedResponse.log = log;
                typedResponse.index = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.username = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.addr = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NewUserCreatedEventResponse> newUserCreatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWUSERCREATED_EVENT));
        return newUserCreatedEventFlowable(filter);
    }

    public List<NodeDeletedEventResponse> getNodeDeletedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NODEDELETED_EVENT, transactionReceipt);
        ArrayList<NodeDeletedEventResponse> responses = new ArrayList<NodeDeletedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NodeDeletedEventResponse typedResponse = new NodeDeletedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.nodeId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NodeDeletedEventResponse> nodeDeletedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NodeDeletedEventResponse>() {
            @Override
            public NodeDeletedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NODEDELETED_EVENT, log);
                NodeDeletedEventResponse typedResponse = new NodeDeletedEventResponse();
                typedResponse.log = log;
                typedResponse.nodeId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NodeDeletedEventResponse> nodeDeletedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NODEDELETED_EVENT));
        return nodeDeletedEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<RouteFinishedEventResponse> getRouteFinishedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROUTEFINISHED_EVENT, transactionReceipt);
        ArrayList<RouteFinishedEventResponse> responses = new ArrayList<RouteFinishedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RouteFinishedEventResponse typedResponse = new RouteFinishedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.routeId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RouteFinishedEventResponse> routeFinishedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RouteFinishedEventResponse>() {
            @Override
            public RouteFinishedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROUTEFINISHED_EVENT, log);
                RouteFinishedEventResponse typedResponse = new RouteFinishedEventResponse();
                typedResponse.log = log;
                typedResponse.routeId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RouteFinishedEventResponse> routeFinishedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROUTEFINISHED_EVENT));
        return routeFinishedEventFlowable(filter);
    }

    public List<RouteStartedEventResponse> getRouteStartedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROUTESTARTED_EVENT, transactionReceipt);
        ArrayList<RouteStartedEventResponse> responses = new ArrayList<RouteStartedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RouteStartedEventResponse typedResponse = new RouteStartedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.routeId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RouteStartedEventResponse> routeStartedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RouteStartedEventResponse>() {
            @Override
            public RouteStartedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROUTESTARTED_EVENT, log);
                RouteStartedEventResponse typedResponse = new RouteStartedEventResponse();
                typedResponse.log = log;
                typedResponse.routeId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RouteStartedEventResponse> routeStartedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROUTESTARTED_EVENT));
        return routeStartedEventFlowable(filter);
    }

    public List<RouteStatusFulfilledEventResponse> getRouteStatusFulfilledEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROUTESTATUSFULFILLED_EVENT, transactionReceipt);
        ArrayList<RouteStatusFulfilledEventResponse> responses = new ArrayList<RouteStatusFulfilledEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RouteStatusFulfilledEventResponse typedResponse = new RouteStatusFulfilledEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.requestId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.status = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RouteStatusFulfilledEventResponse> routeStatusFulfilledEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RouteStatusFulfilledEventResponse>() {
            @Override
            public RouteStatusFulfilledEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROUTESTATUSFULFILLED_EVENT, log);
                RouteStatusFulfilledEventResponse typedResponse = new RouteStatusFulfilledEventResponse();
                typedResponse.log = log;
                typedResponse.requestId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.status = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RouteStatusFulfilledEventResponse> routeStatusFulfilledEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROUTESTATUSFULFILLED_EVENT));
        return routeStatusFulfilledEventFlowable(filter);
    }

    public List<UserDeletedEventResponse> getUserDeletedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(USERDELETED_EVENT, transactionReceipt);
        ArrayList<UserDeletedEventResponse> responses = new ArrayList<UserDeletedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UserDeletedEventResponse typedResponse = new UserDeletedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.username = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UserDeletedEventResponse> userDeletedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, UserDeletedEventResponse>() {
            @Override
            public UserDeletedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(USERDELETED_EVENT, log);
                UserDeletedEventResponse typedResponse = new UserDeletedEventResponse();
                typedResponse.log = log;
                typedResponse.username = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UserDeletedEventResponse> userDeletedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(USERDELETED_EVENT));
        return userDeletedEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> addNode(String _name, String _ip, String _data_endpoint, String _oracleContractAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDNODE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_ip), 
                new org.web3j.abi.datatypes.Utf8String(_data_endpoint), 
                new org.web3j.abi.datatypes.Address(160, _oracleContractAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addRoute(String _startLocation, String _endLocation) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDROUTE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_startLocation), 
                new org.web3j.abi.datatypes.Utf8String(_endLocation)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addUser(String _username, String _password) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDUSER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_username), 
                new org.web3j.abi.datatypes.Utf8String(_password)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> compareStrings(String a, String b) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_COMPARESTRINGS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(a), 
                new org.web3j.abi.datatypes.Utf8String(b)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> deleteNode(BigInteger _nodeId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DELETENODE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_nodeId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> deleteUser(String _username) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DELETEUSER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_username)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> endRouteEvent(BigInteger _routeId, String _username, BigInteger user_event, BigInteger _dataPoints, BigInteger _nodeId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ENDROUTEEVENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_routeId), 
                new org.web3j.abi.datatypes.Utf8String(_username), 
                new org.web3j.abi.datatypes.generated.Uint256(user_event), 
                new org.web3j.abi.datatypes.generated.Uint256(_dataPoints), 
                new org.web3j.abi.datatypes.generated.Uint256(_nodeId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> fulfillRouteStatus(byte[] _requestId, Boolean _status) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_FULFILLROUTESTATUS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_requestId), 
                new org.web3j.abi.datatypes.Bool(_status)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> getAddress(BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> getNodesCount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETNODESCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> getPassword(BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETPASSWORD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> getRouteEndEventCount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETROUTEENDEVENTCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getRouteStartEventCount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETROUTESTARTEVENTCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getRoutesCount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETROUTESCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> getUsername(BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETUSERNAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> getUsersCount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETUSERSCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> isOwner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Tuple6<BigInteger, String, String, String, String, BigInteger>> nodes(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NODES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple6<BigInteger, String, String, String, String, BigInteger>>(function,
                new Callable<Tuple6<BigInteger, String, String, String, String, BigInteger>>() {
                    @Override
                    public Tuple6<BigInteger, String, String, String, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<BigInteger, String, String, String, String, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue());
                    }
                });
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> requestRouteStatus(BigInteger _routeId, String _jobID, String _oracleAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REQUESTROUTESTATUS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_routeId), 
                new org.web3j.abi.datatypes.Utf8String(_jobID), 
                new org.web3j.abi.datatypes.Address(160, _oracleAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple7<BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger, BigInteger>> routeEndEvents(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ROUTEENDEVENTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple7<BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple7<BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple7<BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple5<BigInteger, BigInteger, String, BigInteger, BigInteger>> routeStartEvents(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ROUTESTARTEVENTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple5<BigInteger, BigInteger, String, BigInteger, BigInteger>>(function,
                new Callable<Tuple5<BigInteger, BigInteger, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple5<BigInteger, BigInteger, String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<BigInteger, BigInteger, String, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple7<BigInteger, String, String, String, String, Boolean, Boolean>> routes(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ROUTES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple7<BigInteger, String, String, String, String, Boolean, Boolean>>(function,
                new Callable<Tuple7<BigInteger, String, String, String, String, Boolean, Boolean>>() {
                    @Override
                    public Tuple7<BigInteger, String, String, String, String, Boolean, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<BigInteger, String, String, String, String, Boolean, Boolean>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (Boolean) results.get(5).getValue(), 
                                (Boolean) results.get(6).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> startRouteEvent(BigInteger _routeId, String _username, BigInteger _nodeId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_STARTROUTEEVENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_routeId), 
                new org.web3j.abi.datatypes.Utf8String(_username), 
                new org.web3j.abi.datatypes.generated.Uint256(_nodeId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple8<BigInteger, String, String, String, Boolean, BigInteger, BigInteger, BigInteger>> users(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_USERS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple8<BigInteger, String, String, String, Boolean, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple8<BigInteger, String, String, String, Boolean, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple8<BigInteger, String, String, String, Boolean, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<BigInteger, String, String, String, Boolean, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (Boolean) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue(), 
                                (BigInteger) results.get(7).getValue());
                    }
                });
    }

    @Deprecated
    public static Movement load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Movement(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Movement load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Movement(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Movement load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Movement(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Movement load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Movement(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Movement> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String _agent) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _agent)));
        return deployRemoteCall(Movement.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<Movement> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String _agent) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _agent)));
        return deployRemoteCall(Movement.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Movement> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _agent) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _agent)));
        return deployRemoteCall(Movement.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Movement> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _agent) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _agent)));
        return deployRemoteCall(Movement.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class ChainlinkCancelledEventResponse extends BaseEventResponse {
        public byte[] id;
    }

    public static class ChainlinkFulfilledEventResponse extends BaseEventResponse {
        public byte[] id;
    }

    public static class ChainlinkRequestedEventResponse extends BaseEventResponse {
        public byte[] id;
    }

    public static class NewNodeAddedEventResponse extends BaseEventResponse {
        public BigInteger nodeId;

        public String name;
    }

    public static class NewRouteCreatedEventResponse extends BaseEventResponse {
        public BigInteger routeId;

        public String maker;

        public String startLocation;

        public String endLocation;
    }

    public static class NewUserCreatedEventResponse extends BaseEventResponse {
        public BigInteger index;

        public String username;

        public String addr;
    }

    public static class NodeDeletedEventResponse extends BaseEventResponse {
        public BigInteger nodeId;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class RouteFinishedEventResponse extends BaseEventResponse {
        public BigInteger routeId;
    }

    public static class RouteStartedEventResponse extends BaseEventResponse {
        public BigInteger routeId;
    }

    public static class RouteStatusFulfilledEventResponse extends BaseEventResponse {
        public byte[] requestId;

        public Boolean status;
    }

    public static class UserDeletedEventResponse extends BaseEventResponse {
        public String username;
    }
}
